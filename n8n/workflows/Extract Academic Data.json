{
  "name": "Extract Academic Data",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -2160,
        32
      ],
      "id": "c2028ea6-bcc7-4cff-9d16-019abc70f7c1",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1616,
        224
      ],
      "id": "e0131f54-3413-4b25-a88f-55580b6bfa1c",
      "name": "Loop Over Pages"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "dataPropertyName": "html",
        "extractionValues": {
          "values": [
            {
              "key": "clean_text",
              "cssSelector": "body",
              "skipSelectors": "script, style, nav, footer, img"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -1456,
        496
      ],
      "id": "3a1b03b0-74bd-40e8-b4aa-68bd9188c0d6",
      "name": "HTML"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Tu única tarea es generar un JSON válido y bien formado.\n\nResponde ÚNICAMENTE con un JSON plano que siga este esquema:\n{\n  \"program_name\": \"\",\n  \"level\": \"\",\n  \"modality\": \"\",\n  \"duration\": \"\",\n  \"price\": \"\",\n  \"subjects\": [],\n  \"description\": \"\",\n  \"classification\": \"relevant\" | \"potencial\" | \"irrelevant\"\n}\n\n⚠️ NO uses comillas escapadas, NO encierres el JSON en otro objeto, \nNO pongas la respuesta dentro de 'output' ni 'text'.\n\nReglas:\n1. Responde ÚNICAMENTE con JSON válido. ❌ No uses backticks, markdown ni caracteres escapados.\n2. Si no hay nombre de programa académico identificable, responde:\n   {\"classification\": \"irrelevant\"}\n3. Si el texto solo contiene menús, enlaces o información institucional, responde:\n   {\"classification\": \"irrelevant\"}\n4. Para clasificar como \"relevant\", el texto debe contener:\n   - Un nombre de programa académico, y\n   - los campos: level, modality, duration, price, description y subjects.\n5. Si hay información parcial (por ejemplo: solo hay nombre del programa, o modalidad, o nivel):\n   - Clasifica como \"potencial\".\n   - Coloca \"multiple\" en level/modality si hay ambigüedad.\n   - Coloca en subjects posibles nombres de carreras detectados aunque no estén completos.\n6. Si faltan algunos campos, déjalos vacíos (\"\") o con array vacío [].\n7. No inventes información.\n8. La respuesta debe estar completamente en español.\n9. \"classification\" SOLO puede ser: relevant, potencial o irrelevant.\n10. NO inventes. Copia literalmente valores del texto cuando existan.\n\n⚠️ Tu salida debe ser JSON puro:\n- No encierres el JSON en comillas.\n- No uses caracteres escapados.\n- No uses markdown.\n\nEjemplo correcto:\n{\n  \"program_name\":\"Maestría en Filosofía\",\n  \"level\":\"Maestría\",\n  \"modality\":\"Virtual\",\n  \"duration\":\"3 semestres\",\n  \"price\":\"9.585.000 / 2305 USD aprox. semestral\",\n  \"subjects\":[\n    \"Epistemología de la Investigación Interdisciplinar\",\n    \"Preguntar Filosófico\"\n  ],\n  \"description\":\"La Maestría en Filosofía desafía a pensar críticamente...\",\n  \"classification\":\"relevant\"\n}\n\nEjemplo de salida para irrelevant:\n{\n  \"program_name\": \"\",\n  \"level\": \"\",\n  \"modality\": \"\",\n  \"duration\": \"\",\n  \"price\": \"\",\n  \"subjects\": [],\n  \"description\": \"\",\n  \"classification\": \"irrelevant\"\n}\n\nEjemplo de salida para parcial:\n{\n  \"program_name\":\"Multiple\",\n  \"level\":\"multiple\",\n  \"modality\":\"multiple\",\n  \"duration\":\"\",\n  \"price\":\"\",\n  \"subjects\":[\n    \"Potencial\",\n  ],\n  \"description\":\"Paginas potenciales de tener informacion de un programa.\",\n  \"classification\":\"potencial\"\n}\n\nDescripcion Website:\n{{ $('Loop Over Pages').item.json.description }}\n\nTexto a analizar:\n{{ $json.clean_text }}",
        "hasOutputParser": true,
        "batching": {
          "batchSize": 5
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -896,
        272
      ],
      "id": "30df84fb-b03f-4321-89b1-d1efab648716",
      "name": "Basic LLM Chain",
      "retryOnFail": true
    },
    {
      "parameters": {
        "model": "gpt-oss:20b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -896,
        752
      ],
      "id": "42db8ded-f55e-47a8-8104-e8f6b0b55a76",
      "name": "Ollama Chat Model"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT program_pages_raw.id, institution, domain, program_pages_raw.url, html, websites.description\nFROM program_pages_raw\nINNER JOIN websites ON program_pages_raw.website_id = websites.id\nWHERE status = 'scraped' LIMIT 1",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1872,
        224
      ],
      "id": "598529b1-fa07-49e1-a1b3-dc91d23ad5f1",
      "name": "Get Raw Pages"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO program_records_structured (\n  page_id, university, domain, url, program_name, level, modality,\n  duration, price, subjects, description, extracted_at, updated_at\n)\nVALUES (\n  '{{ $json.id }}',\n  '{{ $json.institution }}',\n  '{{ $json.domain }}',\n  '{{ $json.url }}',\n  '{{ $json.program_name }}',\n  '{{ $json.level }}',\n  '{{ $json.modality }}',\n  '{{ $json.duration }}',\n  '{{ $json.price }}',\n  '{{ JSON.stringify($json.subjects) }}',\n  '{{ $json.description }}',\n  NOW(), \n  NOW())\nON CONFLICT (page_id) DO UPDATE\nSET\n  domain = EXCLUDED.domain,\n  url = EXCLUDED.url,\n  program_name = EXCLUDED.program_name,\n  level = EXCLUDED.level,\n  modality = EXCLUDED.modality,\n  duration = EXCLUDED.duration,\n  price = EXCLUDED.price,\n  subjects = EXCLUDED.subjects,\n  description = EXCLUDED.description,\n  updated_at = NOW()\nRETURNING page_id AS id, 'relevant' AS classification;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        0,
        0
      ],
      "id": "f203b944-ca15-47f4-a2d0-68297d5dc76e",
      "name": "Insert Records Structured",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.classification === 'relevant' || $json.classification === 'potencial' }}",
                    "rightValue": "",
                    "operator": {
                      "type": "boolean",
                      "operation": "true",
                      "singleValue": true
                    },
                    "id": "78e2335c-6ec1-4b89-ac1d-5f38896e1fda"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "relevant"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9ba30399-bd6a-4745-af73-5622026354eb",
                    "leftValue": "={{ $json.classification }}",
                    "rightValue": "=irrelevant",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "irrelevant"
            }
          ]
        },
        "options": {
          "allMatchingOutputs": true
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.3,
      "position": [
        -288,
        272
      ],
      "id": "4dc9be64-3b55-4ac9-bdb4-86cc3118092c",
      "name": "Switch",
      "executeOnce": false,
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE program_pages_raw\nSET status = CASE\n    WHEN '{{ $json.classification }}' = 'relevant' THEN 'classified'\n    WHEN '{{ $json.classification }}' = 'potencial' THEN 'potencial'\n    ELSE 'irrelevant'\nEND,\nupdated_at = NOW()\nWHERE id = '{{ $json.id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        336,
        512
      ],
      "id": "fdd0d4c1-4517-438b-88c8-f764fc09d38e",
      "name": "Update Pages Status"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"program_name\": { \"type\": \"string\" },\n    \"level\": { \"type\": \"string\" },\n    \"modality\": { \"type\": \"string\" },\n    \"duration\": { \"type\": \"string\" },\n    \"price\": { \"type\": \"string\" },\n    \"subjects\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"description\": { \"type\": \"string\" },\n    \"classification\": { \"type\": \"string\", \"enum\": [\"relevant\", \"potencial\", \"irrelevant\"] }\n  },\n  \"required\": [\"classification\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -752,
        752
      ],
      "id": "333bae12-5686-4935-83f7-bd4a835399c7",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0bf2484c-ce4a-4789-ae9c-c3be61defe00",
              "leftValue": "={{ $json.clean_text !== \"\" }}",
              "rightValue": "=",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1248,
        496
      ],
      "id": "98a36ee7-8260-4ff4-9314-6d8c6124a26c",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT page_id AS id, 'relevant' AS classification\n  FROM program_records_structured \n  WHERE page_id = '{{ $('Switch').item.json.id }}';",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        208,
        0
      ],
      "id": "f80658a9-e37b-403d-ad58-10deb1e72e93",
      "name": "Execute a SQL query"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nfunction coerceToObject(any) {\n  if (any && typeof any === 'object') return any;\n  if (typeof any === 'string') {\n    const cleaned = any.replace(/^```json|^```|```$/g, '').trim();\n    try { return JSON.parse(cleaned); } catch (e) {}\n  }\n  return {};\n}\n\nfunction normalizeSubjects(subjects) {\n  if (!subjects) return [];\n  if (Array.isArray(subjects)) return subjects;\n\n  // Si viene como string (por ejemplo separado por comas)\n  if (typeof subjects === 'string') {\n    return subjects\n      .split(',')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n  }\n\n  return [];\n}\n\nfunction normalizeDescription(desc) {\n  if (!desc || typeof desc !== 'string') return \"\";\n\n  return desc\n    .replace(/'/g, \"''\")          // Escapa comillas simples para evitar errores en SQL\n    .replace(/[\\r\\n]+/g, ' ')     // Reemplaza saltos de línea por espacios\n    .replace(/\\s+/g, ' ')         // Colapsa espacios múltiples\n    .trim();\n}\n\nconst out = items.map(item => {\n  let src = item.json?.output ?? item.json?.result ?? item.json?.text ?? item.json ?? {};\n  src = coerceToObject(src);\n\n  const pageData = $('Loop Over Pages').first().json;\n\n  const base = {\n    id: pageData.id,\n    institution: pageData.institution,\n    domain: pageData.domain,\n    url: pageData.url,\n    program_name: src.program_name || \"\",\n    level: src.level || \"\",\n    modality: src.modality || \"\",\n    duration: src.duration || \"\",\n    price: src.price || \"\",\n    subjects: normalizeSubjects(src.subjects),\n    description: normalizeDescription(src.description),\n    classification: src.classification || \"irrelevant\",\n  };\n\n  return { json: base };\n});\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        272
      ],
      "id": "51b240cb-5351-4b4f-afad-6b02dc0431b3",
      "name": "Format LLM Output"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nfunction coerceToObject(any) {\n  if (any && typeof any === 'object') return any;\n  if (typeof any === 'string') {\n    const cleaned = any.replace(/^```json|^```|```$/g, '').trim();\n    try { return JSON.parse(cleaned); } catch (e) {}\n  }\n  return {};\n}\n\nfunction normalizeSubjects(subjects) {\n  if (!subjects) return [];\n  if (Array.isArray(subjects)) return subjects;\n\n  // Si viene como string (por ejemplo separado por comas)\n  if (typeof subjects === 'string') {\n    return subjects\n      .split(',')\n      .map(s => s.trim())\n      .filter(s => s.length > 0);\n  }\n\n  return [];\n}\n\nconst out = items.map(item => {\n\n  const pageData = $('Loop Over Pages').first().json;\n\n  const base = {\n    id: pageData.id,\n    institution: pageData.institution,\n    domain: pageData.domain,\n    url: pageData.url,\n    program_name: \"\",\n    level: \"\",\n    modality: \"\",\n    duration: \"\",\n    price: \"\",\n    subjects: [],\n    description: \"\",\n    classification: \"irrelevant\",\n  };\n\n  return { json: base };\n});\n\nreturn out;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1024,
        512
      ],
      "id": "1f19544f-1def-4a08-a9a5-4856017614b8",
      "name": "Format Irrelevant Output"
    }
  ],
  "pinData": {},
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Get Raw Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Pages": {
      "main": [
        [],
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTML": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Format LLM Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Raw Pages": {
      "main": [
        [
          {
            "node": "Loop Over Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Records Structured": {
      "main": [
        [
          {
            "node": "Execute a SQL query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Insert Records Structured",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Pages Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Pages Status": {
      "main": [
        [
          {
            "node": "Loop Over Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Irrelevant Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute a SQL query": {
      "main": [
        [
          {
            "node": "Update Pages Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format LLM Output": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Irrelevant Output": {
      "main": [
        [
          {
            "node": "Update Pages Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c9b39a26-611c-4cf0-8f2d-e93cebb73a54",
  "meta": {
    "instanceId": "2e3b0a5f443db6941000335ed602e7f66865ee808a7567a89444158e7e72c88e"
  },
  "id": "wbNdzk4hYAu7SbDv",
  "tags": []
}